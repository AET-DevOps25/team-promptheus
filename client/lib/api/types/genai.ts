/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    readonly "/contributions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Start Contributions Ingestion Task
         * @description Start an asynchronous ingestion task for GitHub contributions.
         */
        readonly post: operations["start_contributions_ingestion_task_contributions_post"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/ingest/{task_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Ingestion Task Status
         * @description Get the status of a contributions ingestion task.
         */
        readonly get: operations["get_ingestion_task_status_ingest__task_id__get"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/users/{username}/weeks/{week_id}/questions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Ask Question About User Contributions
         * @description Ask a question about a user's contributions for a specific week.
         */
        readonly post: operations["ask_question_about_user_contributions_users__username__weeks__week_id__questions_post"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /**
         * ContributionMetadata
         * @description Metadata about a contribution to be fetched.
         */
        readonly ContributionMetadata: {
            /** Id */
            readonly id: string;
            /** Selected */
            readonly selected: boolean;
            readonly type: components["schemas"]["ContributionType"];
        };
        /**
         * ContributionsIngestRequest
         * @description Request to ingest contributions for a user's week (metadata only).
         */
        readonly ContributionsIngestRequest: {
            /** Contributions */
            readonly contributions: readonly components["schemas"]["ContributionMetadata"][];
            /** Github Pat */
            readonly github_pat: string;
            /** Repository */
            readonly repository: string;
            /** User */
            readonly user: string;
            /** Week */
            readonly week: string;
        };
        /**
         * ContributionType
         * @description Types of GitHub contributions supported by the system.
         * @enum {string}
         */
        readonly ContributionType: "commit" | "pull_request" | "issue" | "release";
        /** HTTPValidationError */
        readonly HTTPValidationError: {
            /** Detail */
            readonly detail?: readonly components["schemas"]["ValidationError"][];
        };
        /**
         * IngestTaskResponse
         * @description Response from starting a contributions ingestion task.
         */
        readonly IngestTaskResponse: {
            /**
             * Created At
             * Format: date-time
             */
            readonly created_at: string;
            /** Repository */
            readonly repository: string;
            /** @default queued */
            readonly status: components["schemas"]["TaskStatus"];
            /** Summary Id */
            readonly summary_id?: string | null;
            /** Task Id */
            readonly task_id: string;
            /** Total Contributions */
            readonly total_contributions: number;
            /** User */
            readonly user: string;
            /** Week */
            readonly week: string;
        };
        /**
         * IngestTaskStatus
         * @description Status of a contributions ingestion task.
         */
        readonly IngestTaskStatus: {
            /** Completed At */
            readonly completed_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            readonly created_at: string;
            /** Embedding Job Id */
            readonly embedding_job_id?: string | null;
            /** Error Message */
            readonly error_message?: string | null;
            /** Failed Count */
            readonly failed_count: number;
            /** Ingested Count */
            readonly ingested_count: number;
            /** Processing Time Ms */
            readonly processing_time_ms?: number | null;
            /** Repository */
            readonly repository: string;
            /** Started At */
            readonly started_at?: string | null;
            readonly status: components["schemas"]["TaskStatus"];
            readonly summary?: components["schemas"]["SummaryResponse"] | null;
            /** Task Id */
            readonly task_id: string;
            /** Total Contributions */
            readonly total_contributions: number;
            /** User */
            readonly user: string;
            /** Week */
            readonly week: string;
        };
        /**
         * QuestionContext
         * @description Context configuration for question answering.
         */
        readonly QuestionContext: {
            /** Focus Areas */
            readonly focus_areas?: readonly string[];
            /**
             * Include Evidence
             * @default true
             */
            readonly include_evidence: boolean;
            /**
             * Max Evidence Items
             * @default 10
             */
            readonly max_evidence_items: number;
            /** @default detailed */
            readonly reasoning_depth: components["schemas"]["ReasoningDepth"];
        };
        /**
         * QuestionEvidence
         * @description Evidence supporting a question answer.
         */
        readonly QuestionEvidence: {
            /** Contribution Id */
            readonly contribution_id: string;
            readonly contribution_type: components["schemas"]["ContributionType"];
            /** Excerpt */
            readonly excerpt: string;
            /** Relevance Score */
            readonly relevance_score: number;
            /**
             * Timestamp
             * Format: date-time
             */
            readonly timestamp: string;
            /** Title */
            readonly title: string;
        };
        /**
         * QuestionRequest
         * @description Request to ask a question about a user's week.
         */
        readonly QuestionRequest: {
            readonly context?: components["schemas"]["QuestionContext"];
            /** Github Pat */
            readonly github_pat: string;
            /** Question */
            readonly question: string;
            /** Summary */
            readonly summary?: string | null;
        };
        /**
         * QuestionResponse
         * @description Response to a question about a user's week.
         */
        readonly QuestionResponse: {
            /** Answer */
            readonly answer: string;
            /**
             * Asked At
             * Format: date-time
             */
            readonly asked_at: string;
            /** Confidence */
            readonly confidence: number;
            /** Conversation Id */
            readonly conversation_id?: string | null;
            /** Evidence */
            readonly evidence?: readonly components["schemas"]["QuestionEvidence"][];
            /** Question */
            readonly question: string;
            /** Question Id */
            readonly question_id: string;
            /** Reasoning Steps */
            readonly reasoning_steps?: readonly string[];
            /** Response Time Ms */
            readonly response_time_ms: number;
            /** Suggested Actions */
            readonly suggested_actions?: readonly string[];
            /** User */
            readonly user: string;
            /** Week */
            readonly week: string;
        };
        /**
         * ReasoningDepth
         * @description Depth levels for question answering reasoning.
         * @enum {string}
         */
        readonly ReasoningDepth: "quick" | "detailed" | "deep";
        /**
         * SummaryMetadata
         * @description Metadata about a generated summary.
         */
        readonly SummaryMetadata: {
            /** Commits Count */
            readonly commits_count: number;
            /**
             * Generated At
             * Format: date-time
             */
            readonly generated_at: string;
            /** Issues Count */
            readonly issues_count: number;
            /** Pull Requests Count */
            readonly pull_requests_count: number;
            /** Releases Count */
            readonly releases_count: number;
            /** Repositories */
            readonly repositories: readonly string[];
            /** Time Period */
            readonly time_period: string;
            /** Total Contributions */
            readonly total_contributions: number;
        };
        /**
         * SummaryResponse
         * @description Complete summary response (non-streaming).
         */
        readonly SummaryResponse: {
            /** Analysis */
            readonly analysis: string;
            /** Areas For Improvement */
            readonly areas_for_improvement: readonly string[];
            /** Commits Summary */
            readonly commits_summary: string;
            /**
             * Generated At
             * Format: date-time
             */
            readonly generated_at: string;
            /** Issues Summary */
            readonly issues_summary: string;
            /** Key Achievements */
            readonly key_achievements: readonly string[];
            readonly metadata: components["schemas"]["SummaryMetadata"];
            /** Overview */
            readonly overview: string;
            /** Pull Requests Summary */
            readonly pull_requests_summary: string;
            /** Releases Summary */
            readonly releases_summary: string;
            /** Summary Id */
            readonly summary_id: string;
            /** User */
            readonly user: string;
            /** Week */
            readonly week: string;
        };
        /**
         * TaskStatus
         * @description Status values for asynchronous tasks.
         * @enum {string}
         */
        readonly TaskStatus: "queued" | "ingesting" | "summarizing" | "done" | "failed";
        /** ValidationError */
        readonly ValidationError: {
            /** Location */
            readonly loc: readonly (string | number)[];
            /** Message */
            readonly msg: string;
            /** Error Type */
            readonly type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    readonly start_contributions_ingestion_task_contributions_post: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["ContributionsIngestRequest"];
            };
        };
        readonly responses: {
            /** @description Successful Response */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["IngestTaskResponse"];
                };
            };
            /** @description Validation Error */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    readonly get_ingestion_task_status_ingest__task_id__get: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Task ID returned from POST /contributions */
                readonly task_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful Response */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["IngestTaskStatus"];
                };
            };
            /** @description Validation Error */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    readonly ask_question_about_user_contributions_users__username__weeks__week_id__questions_post: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description GitHub username */
                readonly username: string;
                /** @description ISO week format: 2024-W21 */
                readonly week_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["QuestionRequest"];
            };
        };
        readonly responses: {
            /** @description Successful Response */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["QuestionResponse"];
                };
            };
            /** @description Validation Error */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
