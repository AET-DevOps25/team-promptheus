{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/repositories/{usercode}/question": {
      "post": {
        "tags": [
          "git-repo-controller"
        ],
        "summary": "Create a question to be answered asynchronously by the AI service",
        "operationId": "createQuestion",
        "parameters": [
          {
            "name": "usercode",
            "in": "path",
            "description": "UUID access token for repository authentication",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "UUID access token for repository authentication",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        ],
        "requestBody": {
          "description": "Question to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSubmission"
              },
              "example": {
                "question": "Why are these developer raving about 42?"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Question successfully submitted for AI processing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Success confirmation message",
                  "example": "Created Successfully"
                },
                "example": {
                  "message": "Created Successfully"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Requested UUID access token does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                },
                "example": {
                  "error": "Invalid access token"
                }
              }
            }
          }
        }
      }
    },
    "/api/repositories/PAT": {
      "post": {
        "tags": [
          "git-repo-controller"
        ],
        "summary": "Provide the personal access token to retrieve the secure maintainer and developer links",
        "operationId": "createFromPAT",
        "requestBody": {
          "description": "Personal Access Token for GitHub repository",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PATConstruct"
              },
              "example": {
                "personalAccessToken": "ghp_1234567890abcdefghijklmnopqrstuvwxyz",
                "repoLink": "https://github.com/organization/repository"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Secure maintainer and developer access links successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkConstruct",
                  "description": "Contains developer and stakeholder access links",
                  "required": [
                    "developerview",
                    "stakeholderview"
                  ]
                },
                "example": {
                  "developerview": "https://example.com/app/123e4567-e89b-12d3-a456-426614174000",
                  "stakeholderview": "https://example.com/app/123e4567-e89b-12d3-a456-426614174001"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Invalid personal access token provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                },
                "example": {
                  "error": "Invalid personal access token"
                }
              }
            }
          }
        }
      }
    },
    "/api/repositories/{usercode}": {
      "get": {
        "tags": [
          "git-repo-controller"
        ],
        "summary": "Get the git repository information",
        "description": "Auth is handled via the provided UUID",
        "operationId": "getGitRepository",
        "parameters": [
          {
            "name": "usercode",
            "in": "path",
            "description": "UUID access token for repository authentication",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "UUID access token for repository authentication",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        ],
        "responses": {
          "200": {
            "description": "Repository information including questions, summaries, and contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepoInformationConstruct",
                  "description": "Complete repository information with related metadata",
                  "required": [
                    "createdAt",
                    "isMaintainer",
                    "repoLink"
                  ]
                },
                "example": {
                  "repoLink": "https://github.com/organization/repository",
                  "isMaintainer": true,
                  "createdAt": "2023-01-15T14:30:45.123Z",
                  "questions": [
                    {
                      "id": "550e8400-e29b-41d4-a716-446655440000",
                      "question": "How does the authentication system work?",
                      "answer": {
                        "answer": "The system uses OAuth2 with JWT tokens",
                        "createdAt": "2023-01-16T09:15:30.456Z"
                      },
                      "createdAt": "2023-01-15T16:45:22.789Z"
                    }
                  ],
                  "summaries": [],
                  "contents": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Requested UUID access token does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                },
                "example": {
                  "error": "Invalid access token"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QuestionSubmission": {
        "type": "object",
        "description": "Request object for submitting a new question to be answered by the AI",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question text to be processed by the AI",
            "example": "How does the authentication system work?",
            "maxLength": 500,
            "minLength": 5
          }
        },
        "required": [
          "question"
        ]
      },
      "PATConstruct": {
        "type": "object",
        "description": "Request object containing GitHub Personal Access Token and repository information",
        "properties": {
          "repolink": {
            "type": "string",
            "description": "URL to the GitHub repository",
            "example": "https://github.com/organization/repository"
          },
          "pat": {
            "type": "string",
            "description": "GitHub Personal Access Token with repo scope",
            "example": "ghp_1234567890abcdefghijklmnopqrstuvwxyz"
          }
        },
        "required": [
          "pat",
          "repolink"
        ]
      },
      "LinkConstruct": {
        "type": "object",
        "description": "Contains secure access links for developers and stakeholders",
        "properties": {
          "developerview": {
            "type": "string",
            "description": "URL for developer access to the repository",
            "example": "https://example.com/app/123e4567-e89b-12d3-a456-426614174000"
          },
          "stakeholderview": {
            "type": "string",
            "description": "URL for stakeholder access to the repository",
            "example": "https://example.com/app/123e4567-e89b-12d3-a456-426614174001"
          }
        },
        "required": [
          "developerview",
          "stakeholderview"
        ]
      },
      "ContentConstruct": {
        "type": "object",
        "description": "Metadata about repository content with AI-generated summary",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the content item",
            "example": "commit-12a34bc5"
          },
          "type": {
            "type": "string",
            "description": "Type of content (e.g., commit, pull request, issue)",
            "example": "commit"
          },
          "user": {
            "type": "string",
            "description": "GitHub username of the content author",
            "example": "johndoe"
          },
          "summary": {
            "type": "string",
            "description": "AI-generated summary of the content",
            "example": "Fixed authentication bug in login controller"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the content was created or processed",
            "example": "2023-01-20T08:45:12.789Z"
          }
        },
        "required": [
          "createdAt",
          "id",
          "summary",
          "type",
          "user"
        ]
      },
      "GitRepoInformationConstruct": {
        "type": "object",
        "description": "Repository information including metadata, questions, summaries, and contents",
        "properties": {
          "repoLink": {
            "type": "string",
            "description": "URL to the GitHub repository",
            "example": "https://github.com/organization/repository"
          },
          "isMaintainer": {
            "type": "boolean",
            "description": "Whether the requesting user has maintainer privileges",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the repository was registered with the service",
            "example": "2023-01-15T14:30:45.123Z"
          },
          "questions": {
            "type": "array",
            "description": "List of questions and their answers related to this repository",
            "items": {
              "$ref": "#/components/schemas/QuestionConstruct"
            }
          },
          "summaries": {
            "type": "array",
            "description": "List of AI-generated summaries of the repository content",
            "items": {
              "$ref": "#/components/schemas/SummaryConstruct"
            }
          },
          "contents": {
            "type": "array",
            "description": "List of repository content metadata",
            "items": {
              "$ref": "#/components/schemas/ContentConstruct"
            }
          }
        },
        "required": [
          "createdAt",
          "isMaintainer",
          "repoLink"
        ]
      },
      "QuestionAnswerConstruct": {
        "type": "object",
        "description": "Answer provided by the AI for a user's question",
        "properties": {
          "answer": {
            "type": "string",
            "description": "The answer text generated by the AI",
            "example": "The system uses OAuth2 with JWT tokens for authentication"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the answer was generated",
            "example": "2023-01-16T09:15:30.456Z"
          }
        },
        "required": [
          "answer",
          "createdAt"
        ]
      },
      "QuestionConstruct": {
        "type": "object",
        "description": "Question submitted by a user with its answers",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question text submitted by the user",
            "example": "How does the authentication system work?"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the question was created",
            "example": "2023-01-15T16:45:22.789Z"
          },
          "answers": {
            "type": "array",
            "description": "List of AI-generated answers to this question",
            "items": {
              "$ref": "#/components/schemas/QuestionAnswerConstruct"
            }
          }
        },
        "required": [
          "createdAt",
          "question"
        ]
      },
      "SummaryConstruct": {
        "type": "object",
        "description": "AI-generated summary of repository content",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier for the summary",
            "example": 42
          },
          "summary": {
            "type": "string",
            "description": "Text content of the AI-generated summary",
            "example": "This repository implements a RESTful API for user authentication using Spring Security"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the summary was generated",
            "example": "2023-01-18T10:15:30.123Z"
          }
        },
        "required": [
          "createdAt",
          "id",
          "summary"
        ]
      }
    }
  }
}
