import { type NextRequest, NextResponse } from "next/server";

// Mock data for development
const mockQAItems = [
	{
		answer: `Based on my analysis of your recent commits and performance monitoring data, I've identified several key bottlenecks:

1. **Database Query Optimization**: The user authentication service has N+1 query issues in the login flow, causing up to 50ms additional latency per request.

2. **Memory Management**: The background job processor shows memory leaks in the Redis connection pool, with memory usage growing by ~100MB per hour.

3. **API Rate Limiting**: The current fixed-window rate limiting causes traffic spikes that could be smoothed with a sliding window approach.

**Recommendations:**
- Implement query batching in the auth service
- Add connection pooling monitoring and cleanup
- Consider upgrading to sliding window rate limiting

Recent commits by jane.smith in api-backend/pull/456 address some of these issues.`,
		author: "john.doe",
		downvotes: 1,
		id: "1",
		question: "What are the main performance bottlenecks in our API?",
		repositories: ["api-backend", "auth-service"],
		status: "approved" as const,
		tags: ["performance", "optimization"],
		timestamp: "2024-01-15T14:30:00Z",
		upvotes: 8,
	},
	{
		answer: `Based on the last 30 days of activity across all repositories:

**Most Active Reviewers:**
1. **sarah.johnson** - 47 reviews, avg response time: 2.1 hours
2. **mike.wilson** - 34 reviews, avg response time: 3.4 hours
3. **jane.smith** - 28 reviews, avg response time: 1.8 hours

**Review Quality Metrics:**
- sarah.johnson provides the most detailed feedback (avg 4.2 comments per review)
- jane.smith has the fastest turnaround time
- mike.wilson focuses on security and architecture reviews

**Recommendations:**
- Consider rotating review assignments to distribute knowledge
- jane.smith's quick review process could be documented as best practice`,
		author: "sarah.johnson",
		downvotes: 0,
		id: "2",
		question: "Which team members are most active in code reviews?",
		repositories: ["auth-service", "api-backend", "frontend-app"],
		status: "pending" as const,
		tags: ["team", "reviews"],
		timestamp: "2024-01-14T09:15:00Z",
		upvotes: 5,
	},
	{
		answer: `Here are the key security enhancements implemented in the past month:

**Authentication & Authorization:**
- Implemented JWT token rotation in auth-service (commit abc123)
- Added multi-factor authentication support
- Enhanced password policy enforcement

**Data Protection:**
- Enabled encryption at rest for user data
- Implemented field-level encryption for PII
- Added data retention policies

**Infrastructure Security:**
- Updated all dependencies to patch known vulnerabilities
- Implemented security headers in API responses
- Added rate limiting to prevent abuse

**Monitoring & Compliance:**
- Enhanced security logging and alerting
- Added automated security scanning to CI/CD
- Implemented GDPR compliance features

All changes have been reviewed and approved by the security team.`,
		author: "mike.wilson",
		downvotes: 0,
		id: "3",
		question: "What security improvements were made last month?",
		repositories: ["auth-service", "api-backend"],
		status: "approved" as const,
		tags: ["security", "compliance"],
		timestamp: "2024-01-13T16:45:00Z",
		upvotes: 12,
	},
];

export async function GET() {
	// Simulate API delay
	await new Promise((resolve) => setTimeout(resolve, 500));

	return NextResponse.json({
		items: mockQAItems,
		total: mockQAItems.length,
	});
}

export async function POST(request: NextRequest) {
	try {
		const { question } = await request.json();

		if (!question) {
			return NextResponse.json(
				{ error: "Question is required" },
				{ status: 400 },
			);
		}

		// Simulate AI processing delay
		await new Promise((resolve) => setTimeout(resolve, 3000));

		// Generate a mock AI response
		const mockAnswer = `Based on my analysis of your repositories, here's what I found regarding "${question}":

This is a comprehensive AI-generated response that would analyze your codebase, recent commits, pull requests, and issues to provide contextual insights.

**Key Findings:**
- Analysis of recent code patterns and changes
- Identification of relevant repositories and contributors
- Recommendations based on best practices

**Supporting Evidence:**
- Recent commits and pull requests
- Code quality metrics
- Team activity patterns

This response would be generated by analyzing your actual repository data using semantic search and AI understanding of your codebase.`;

		const newQA = {
			answer: mockAnswer,
			author: "current.user",
			downvotes: 0,
			id: Date.now().toString(), // Would be actual user from auth
			question,
			repositories: ["api-backend", "auth-service"],
			status: "pending" as const,
			tags: ["ai-generated"],
			timestamp: new Date().toISOString(), // Would be determined by AI
			upvotes: 0,
		};

		return NextResponse.json(newQA);
	} catch (error) {
		console.error("Q&A creation error:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 },
		);
	}
}
