name: Create and publish a Docker image

on:
    workflow_call:
        inputs:
            image_suffix:
                required: true
                description: Suffix of generated dockerimages' name
                type: string
            context:
                required: true
                description: Context, docker build is executed in
                type: string
            dockerfile:
                required: true
                description: Dockerfile location (relative to context)
                type: string
            openapi_url:
                required: false
                description: URL for OpenAPI specification
                type: string
            healthcheck_url:
                required: false
                description: URL for healthcheck endpoint
                type: string

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository_owner }}/promptheus-${{ inputs.image_suffix }}

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: write
            packages: write
            attestations: write
        outputs:
            tags: ${{ steps.meta.outputs.tags }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref }} # otherwise commit-backs to the branch don't work
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=edge,branch=main
                  flavor: |
                      latest=auto

            - uses: docker/setup-buildx-action@v3
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  provenance: mode=max
                  sbom: true
                  context: ${{ inputs.context }}
                  push: true
                  file: "${{ inputs.context }}/${{ inputs.dockerfile }}"
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  annotations: ${{ steps.meta.outputs.annotations }}
                  build-args: |
                      GIT_COMMIT_SHA=${{ github.sha }}
                      GIT_COMMIT_MESSAGE="${github.event.head_commit.message//\n/}"
                  cache-from: type=gha
                  cache-to: type=gha,mode=min
            - name: Attest
              uses: actions/attest-build-provenance@v2
              id: attest
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true
            - name: Update OpenAPI spec
              if: github.ref != 'refs/heads/main' && (inputs.image_suffix == 'server' || inputs.image_suffix == 'contribution' || inputs.image_suffix == 'search' || inputs.image_suffix == 'genai')
              run:  |
                  echo "::group::Start services"

                  touch .env
                  docker compose up --detach --no-build ${{ inputs.image_suffix }}
                  docker compose down ${{ inputs.image_suffix }}
                  docker run --rm --detach --net=host "${{ steps.meta.outputs.tags }}"

                  echo "::endgroup::"
                  echo "::group::Wait for ${{ inputs.image_suffix }} health"

                  echo "Waiting for services to be healthy..."
                  timeout 120 bash -c 'while ! curl -f -s "${{ inputs.healthcheck_url }}" >/dev/null; do echo "Waiting for server..."; sleep 5; done'
                  echo "${{ inputs.image_suffix }} is healthy!"

                  echo "::endgroup::"
                  echo "::group::Extract OpenAPI definition"

                  curl -f -s "${{ inputs.openapi_url }}" | jq '.' > "${{ inputs.context }}/openapi.json"
                  echo "OpenAPI definition extracted successfully"

                  echo "::endgroup::"
                  echo "::group::Contained $(jq '.paths | keys | length' ${{ inputs.context }}/openapi.json) Endpoints"

                  jq '.paths | keys' ${{ inputs.context }}/openapi.json

                  echo "::endgroup::"
                  echo "::group::Contained $(jq '.components.schemas | keys | length' ${{ inputs.context }}/openapi.json) Schemas"

                  jq '.components.schemas | keys' ${{ inputs.context }}/openapi.json

                  echo "::endgroup::"
                  echo "::group::Commit OpenAPI changes"

                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add ${{ inputs.context }}/openapi.json
                  if ! git diff --staged --quiet; then
                    git commit -m "chore: Update OpenAPI definition [skip ci]"
                    git push
                  else
                    echo "No changes to OpenAPI definition"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
