/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
	readonly "/api/repositories/{usercode}/selection": {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get?: never;
		readonly put?: never;
		/** tell the AI service which items should be included into the summary */
		readonly post: operations["createCommitSelectionForSummary"];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly "/api/repositories/{usercode}/question": {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get?: never;
		readonly put?: never;
		/** create a question to be answered asynchronously by the ai service */
		readonly post: operations["createQuestion"];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly "/api/repositories/PAT": {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly get?: never;
		readonly put?: never;
		/** Provide the personal access token to retrieve the secure maintainer and developer links */
		readonly post: operations["createFromPAT"];
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
	readonly "/api/repositories/{usercode}": {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		/**
		 * Get the git repository information
		 * @description Auth is handled via the provided UUID
		 */
		readonly get: operations["getGitRepository"];
		readonly put?: never;
		readonly post?: never;
		readonly delete?: never;
		readonly options?: never;
		readonly head?: never;
		readonly patch?: never;
		readonly trace?: never;
	};
};
export type webhooks = Record<string, never>;
export type components = {
	schemas: {
		readonly SelectionSubmission: {
			readonly selection?: readonly string[];
		};
		readonly QuestionSubmission: {
			readonly question?: string;
		};
		readonly PATConstruct: {
			readonly repolink?: string;
			readonly pat?: string;
		};
		readonly LinkConstruct: {
			readonly developerview?: string;
			readonly stakeholderview?: string;
		};
		readonly ContentConstruct: {
			readonly id?: string;
			readonly type?: string;
			readonly user?: string;
			readonly summary?: string;
			/** Format: date-time */
			readonly createdAt?: string;
		};
		readonly GitRepoInformationConstruct: {
			readonly repoLink?: string;
			readonly isMaintainer?: boolean;
			/** Format: date-time */
			readonly createdAt?: string;
			readonly questions?: readonly components["schemas"]["QuestionConstruct"][];
			readonly summaries?: readonly components["schemas"]["SummaryConstruct"][];
			readonly contents?: readonly components["schemas"]["ContentConstruct"][];
		};
		readonly QuestionAnswerConstruct: {
			readonly answer?: string;
			/** Format: date-time */
			readonly createdAt?: string;
		};
		readonly QuestionConstruct: {
			readonly question?: string;
			/** Format: date-time */
			readonly createdAt?: string;
			readonly answers?: readonly components["schemas"]["QuestionAnswerConstruct"][];
		};
		readonly SummaryConstruct: {
			/** Format: int64 */
			readonly id?: number;
			readonly summary?: string;
			/** Format: date-time */
			readonly createdAt?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
	readonly createCommitSelectionForSummary: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly usercode: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["SelectionSubmission"];
			};
		};
		readonly responses: {
			/** @description Items were included in the summary */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "text/plain": string;
				};
			};
			/** @description Invalid input provided - please make sure that all selected content exists */
			readonly 400: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "text/plain": string;
				};
			};
			/** @description Forbidden - Requested code does not exist */
			readonly 403: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "text/plain": string;
				};
			};
		};
	};
	readonly createQuestion: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly usercode: string;
			};
			readonly cookie?: never;
		};
		/** @description Question to create */
		readonly requestBody: {
			readonly content: {
				/** @example {
				 *       "question": "Why are these developer raving about 42?"
				 *     } */
				readonly "application/json": components["schemas"]["QuestionSubmission"];
			};
		};
		readonly responses: {
			/** @description Items were included in the summary */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "text/plain": string;
				};
			};
			/** @description Forbidden - Requested code does not exist */
			readonly 403: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "*/*": string;
				};
			};
		};
	};
	readonly createFromPAT: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path?: never;
			readonly cookie?: never;
		};
		readonly requestBody: {
			readonly content: {
				readonly "application/json": components["schemas"]["PATConstruct"];
			};
		};
		readonly responses: {
			/** @description secure maintainer and developer links */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "application/json": components["schemas"]["LinkConstruct"];
				};
			};
			/** @description Forbidden - Requested code does not exist */
			readonly 403: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "*/*": components["schemas"]["LinkConstruct"];
				};
			};
		};
	};
	readonly getGitRepository: {
		readonly parameters: {
			readonly query?: never;
			readonly header?: never;
			readonly path: {
				readonly usercode: string;
			};
			readonly cookie?: never;
		};
		readonly requestBody?: never;
		readonly responses: {
			/** @description get repository-content */
			readonly 200: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "application/json": components["schemas"]["GitRepoInformationConstruct"];
				};
			};
			/** @description Forbidden - Requested code does not exist */
			readonly 403: {
				headers: {
					readonly [name: string]: unknown;
				};
				content: {
					readonly "text/plain": string;
				};
			};
		};
	};
}
